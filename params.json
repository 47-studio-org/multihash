{
  "name": "Multihash",
  "tagline": "Self identifying hashes",
  "body": "# multihash\r\n\r\nMultihash is a protocol for differentiating outputs from various well-established cryptographic hash functions, addressing size + encoding considerations.\r\n\r\nIt is useful to write applications that future-proof their use of hashes, and allow multiple hash functions to coexist. See https://github.com/jbenet/random-ideas/issues/1 for a longer discussion.\r\n\r\n## Example\r\n\r\nOutputs of `<encoding>.encode(multihash(<digest>, <function>))`:\r\n\r\n```\r\n# sha1 - 0x11\r\n11140beec7b5ea3f0fdbc95d0dd47f3c5bc275da8a33 # sha1 in hex\r\n24a0qvp7pqn3y3yvt5egvn3z7hdw4xeuh8tg # sha1 in base32\r\n5dqx43zNtUUbPj97vJhpHyUUPyrmXG # sha1 in base58\r\nERQL7se16j8P28ldDdR/PFvCddqKMw== # sha1 in base64\r\n\r\n# sha2-256 0x12\r\n12202c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae # sha2-256 in hex\r\n28g2r9nmddmfzhmfz6dmaf0x610k84u25nr690xzm3wrmqm8c9kefbg # sha256 in base32\r\nQmRJzsvyCQyizr73Gmms8ZRtvNxmgqumxc2KUp71dfEmoj # sha256 in base58\r\nEiAsJrRraP/Gj/mbRTwdMEE0E0ItcGSDv6D5il6IYmbnrg== # sha256 in base64\r\n```\r\n\r\n## format\r\n\r\n```\r\n<1-byte hash function code><1-byte digest size in bytes><hash function output>\r\n```\r\n\r\nBinary example (only 4 bytes for simplicity):\r\n\r\n```\r\nfn code  dig size hash digest\r\n-------- -------- ------------------------------------\r\n00010001 00000100 101101100 11111000 01011100 10110101\r\nsha1     4 bytes  4 byte sha1 digest\r\n```\r\n\r\n> Why have digest size as a separate byte?\r\n\r\nBecause you end up with a function code really meaning \"function-and-digest-size-code\". Makes using custom digest sizes annoying, and is less flexible.\r\n\r\n> What if we need more?\r\n\r\nLet's decide that when we have 128 hash functions or digest sizes.\r\n\r\n> Why isn't the size first?\r\n\r\nBecause aesthetically I prefer the code first. You already have to write your stream parsing code to understand that a single byte already means \"a length in bytes more to skip\". Reversing these doesn't buy you much.\r\n\r\n## Implementations:\r\n\r\n- [go-multihash](//github.com/jbenet/go-multihash)\r\n- [node-multihash](//github.com/jbenet/node-multihash)\r\n- [clj-multihash](//github.com/greglook/clj-multihash)\r\n- rust-multihash\r\n  - [by @dignifiedquire](//github.com/dignifiedquire/rust-multihash)\r\n  - [by @google](//github.com/google/rust-multihash)\r\n- [haskell-multihash](//github.com/LukeHoersten/multihash)\r\n- [python-multihash](//github.com/tehmaze/python-multihash)\r\n- [elixir-multihash](//github.com/zabirauf/ex_multihash), [elixir-multihashing](//github.com/candeira/ex_multihashing)\r\n- [swift-multihash](//github.com/NeoTeo/SwiftMultihash)\r\n- [ruby-multihash](//github.com/neocities/ruby-multihash)\r\n- [MultiHash.Net](//github.com/MCGPPeters/MultiHash.Net)\r\n- [scala-multihash](//github.com/mediachain/scala-multihash)\r\n- [php-multihash](//github.com/Fil/php-multihash)\r\n\r\n## table for Multihash v1.0.0-RC (semver)\r\n\r\nThe current multihash table is [here](hashtable.csv):\r\n\r\n```\r\ncode name\r\n0x11 sha1\r\n0x12 sha2-256\r\n0x13 sha2-512\r\n0x14 sha3-512\r\n0x15 sha3-384\r\n0x16 sha3-256\r\n0x17 sha3-224\r\n0x18 shake-128\r\n0x19 shake-256\r\n0x40 blake2b\r\n0x41 blake2s\r\n# 0x00-0x0f reserved for application specific functions\r\n# 0x10-0x3f reserved for SHA standard functions\r\n# 0x14 formerly had the name \"sha3\", now deprecated\r\n```\r\n\r\n\r\n### other tables\r\n\r\nCannot find a good standard on this. Found some _different_ IANA ones:\r\n\r\n- https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml#tls-parameters-18\r\n- http://tools.ietf.org/html/rfc6920#section-9.4\r\n\r\nThey disagree. :(\r\n\r\n## Disclaimers\r\n\r\nWarning: **obviously multihash values bias the first two bytes**. Do not expect them to be uniformly distributed. The entropy size is `len(multihash) - 2`. Skip the first two bytes when using them with bloom filters, etc. Why not _ap_pend instead of _pre_pend? Because when reading a stream of hashes, you can know the length of the hash (from the table).\r\n\r\nLicense: MIT\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}